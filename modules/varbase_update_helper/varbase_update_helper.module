<?php

/**
 * @file
 * Contains varbase_update_helper.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

const CONFIG_NOT_FOUND = 0;
const CONFIG_ALREADY_APPLIED = 1;
const CONFIG_NOT_EXPECTED = 2;
const CONFIG_APPLIED_SUCCESSFULLY = 3;

/**
 * Implements hook_form_alter().
 */
function varbase_update_helper_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if($form_id == "checklistapi_checklist_form"){
    if(!$form['actions']["save"]['#submit']){
      $form['actions']["save"]['#submit'] = [];
    }
    $form['actions']["save"]['#submit'][] = 'varbase_update_helper_checklistapi_form_submit';
  }
}

function varbase_update_helper_checklistapi_form_submit(array $form, FormStateInterface $form_state){
  $updateHelper = \Drupal::service('update_helper.updater');
  $messenger = \Drupal::messenger();

  $checklistapi = $form_state->getValue('checklistapi');
  foreach ($checklistapi as $key => $updateset) {
    if($key == "checklistapi__active_tab") continue;
    if(is_array($updateset) && !empty($updateset)){
      foreach ($updateset as $update => $status) {
        if($status){
          $update_data = explode(":", $update);
          $update_data[0] = "varbase_core";
          $checkUpdate = $updateHelper->checkUpdate($update_data[0], $update_data[1]);
          if ($checkUpdate == CONFIG_ALREADY_APPLIED || $checkUpdate == CONFIG_APPLIED_SUCCESSFULLY) continue;
          if ($checkUpdate == CONFIG_NOT_EXPECTED){
            $checklistapi[$key][$update] = 0;
            $messenger->addWarning(t('Update %updateid cannot be applied because the expected config is changed.', ['%updateid' => $update_data[1]]));
            continue;
          }
          $updateHelper->executeUpdate($update_data[0], $update_data[1]);
        }
      }
    }
  }

  $checklist = $form['#checklist'];

  // Save progress.
  $checklist->saveProgress($checklistapi);

  // Preserve the active tab after submission.
  $form_state->setRedirect($checklist->getRouteName(), [], [
    'fragment' => $values['checklistapi__active_tab'],
  ]);
}

/**
 * Implements hook_help().
 */
function varbase_update_helper_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the varbase_update_helper module.
    case 'help.page.varbase_update_helper':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Varbase update helper') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_checklistapi_checklist_info_alter().
 */
function varbase_update_helper_checklistapi_checklist_info_alter(array &$definitions) {
  if (isset($definitions['update_helper_checklist']['#title'])) {
    $definitions['update_helper_checklist']['#title'] = t('Varbase update instructions');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function varbase_update_helper_form_checklistapi_checklist_form_alter(&$form, &$form_state) {
  $form['#attached']['library'][] = 'varbase_update_helper/varbase_update_helper';
}