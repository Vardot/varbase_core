<?php

/**
 * @file
 * Contains varbase_security.module.
 */

use Vardot\Entity\EntityDefinitionUpdateManager;
use Vardot\Installer\ModuleInstallerFactory;

/**
 * Implements hook_form_FORM_ID_alter() for user_form().
 */
function varbase_security_form_user_form_alter(&$form, &$form_state) {
  if (\Drupal::moduleHandler()->moduleExists('password_policy')) {
    if (isset($form['account']['password_policy_status'])) {
      // Hide the password policy status table.
      unset($form['account']['password_policy_status']);
    }
  }
}

/**
 * Implements hook_element_info_alter().
 */
function varbase_security_element_info_alter(array &$types) {
  if (\Drupal::moduleHandler()->moduleExists('password_policy')) {
    if (isset($types['password_confirm'])) {
      if (isset($types['password_confirm']['#process'])) {
        // Hide the password confirm process.
        if ($key = array_search('password_policy_check_constraints_password_confirm_process', $types['password_confirm']['#process'])) {
          unset($types['password_confirm']['#process'][$key]);
        }
      }

      // Have the custom Varbase security user form process password confirm.
      $types['password_confirm']['#process'][] = 'varbase_security_user_form_process_password_confirm';
    }
  }
}

/**
 * Varbase Security element process handler for client-side password validation.
 *
 * This #process handler is automatically invoked for 'password_confirm' form
 * elements to add the JavaScript and string translations for dynamic password
 * validation.
 */
function varbase_security_user_form_process_password_confirm(array $element) {
  $config = \Drupal::service('config.factory')
    ->getEditable('varbase_security.password_suggestions.settings')
    ->get();

  $password_minimal_length = \Drupal::service('config.factory')
    ->getEditable('password_policy.password_policy.default_policy')
    ->get('policy_constraints')[2]["character_length"];

  $password_settings = [
    'confirmTitle' => $config['confirmTitle'] ?? t('Password match:'),
    'confirmSuccess' => $config['confirmSuccess'] ?? t('yes'),
    'confirmFailure' => $config['confirmFailure'] ?? t('no'),
    'strengthTitle' => $config['strengthTitle'] ?? t('Password strength:'),
    'showStrengthIndicator' => TRUE,
    'hasWeaknesses' => $config['hasWeaknesses'] ?? t('Recommendations to make your password stronger:'),
    'tooShort' => $config['tooShort'] ?? t('Make it at least 8 characters'),
    'addLowerCase' => $config['addLowerCase'] ?? t('Add lowercase letters'),
    'addUpperCase' => $config['addUpperCase'] ?? t('Add uppercase letters'),
    'addNumbers' => $config['addNumbers'] ?? t('Add numbers'),
    'addPunctuation' => $config['addPunctuation'] ?? t('Add punctuation'),
    'sameAsUsername' => $config['sameAsUsername'] ?? t('Make it different from your username'),
    'weak' => $config['weak'] ?? t('Weak'),
    'fair' => $config['fair'] ?? t('Fair'),
    'good' => $config['good'] ?? t('Good'),
    'strong' => $config['strong'] ?? t('Strong'),
    'username' => \Drupal::currentUser()->getAccountName(),
    'minimal_length' => $password_minimal_length ?? 12,
  ];

  $element['#attached']['library'][] = 'varbase_security/password-suggestions';
  $element['#attached']['drupalSettings']['password'] = $password_settings;

  return $element;
}

/**
 * Implements hook_modules_installed().
 */
function varbase_security_modules_installed($modules, $is_syncing) {
  if (in_array('security_review', $modules)) {
    // The module will be Enabled and Disabled many times
    // with development and deployments to production sites.
    // But the need to have the basic extra change for config over
    // the Security Review default configs.
    // -------------------------------------------------
    // Managed configs for the Security Review module.
    $managed_configs = [
      'security_review.settings',
      'security_review.check.security_review-admin_permissions',
      'security_review.check.security_review-error_reporting',
      'security_review.check.security_review-executable_php',
      'security_review.check.security_review-failed_logins',
      'security_review.check.security_review-field',
      'security_review.check.security_review-file_perms',
      'security_review.check.security_review-input_formats',
      'security_review.check.security_review-private_files',
      'security_review.check.security_review-query_errors',
      'security_review.check.security_review-temporary_files',
      'security_review.check.security_review-trusted_hosts',
      'security_review.check.security_review-upload_extensions',
      'security_review.check.security_review-views_access',
    ];

    // Import managed configs to the site active configs.
    ModuleInstallerFactory::importConfigsFromList('varbase_security', $managed_configs, 'config/managed/security_review');

    // Entity updates to clear up any mismatched entity and/or field definitions
    // And Fix changes were detected in the entity type and field definitions.
    \Drupal::classResolver()
      ->getInstanceFromDefinition(EntityDefinitionUpdateManager::class)
      ->applyUpdates();
  }
}
