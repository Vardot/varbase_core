diff --git a/js/maxlength.js b/js/maxlength.js
index ede5104f3267d971fd08fe51725fdf6478a62755..bba2bc2561f36682c4326cc28fa00e07b3a77c51 100644
--- a/js/maxlength.js
+++ b/js/maxlength.js
@@ -1,6 +1,6 @@
 (function ($, Drupal) {
 
-  // Make evrything local
+  // Make variables local.
   var ml = ml || {};
   ml.options = ml.options || {};
 
@@ -20,6 +20,14 @@
           options['enforce'] = true;
         }
         $this.charCount(options);
+
+        // CKEditor 5 integration.
+        if (this.dataset.ckeditor5Id) {
+          let eid = this.dataset.ckeditor5Id;
+          setTimeout(function() {
+            ml.ckeditor5(Drupal.CKEditor5Instances.get(eid), options);
+          });
+        }
       });
     },
     detach: function(context, settings) {
@@ -40,12 +48,18 @@
    *   https://gist.github.com/Fabax/4724890
    *
    *  @param obj
-   *    a jQuery object for input elements
+   *    A jQuery object for input elements.
    *  @param options
-   *    an array of options.
+   *    The array containing the maxlength configurations.
    *  @param count
    *    In case obj.val() wouldn't return the text to count, this should
    *    be passed with the number of characters.
+   *  @param wysiwyg
+   *    The ckeditor.
+   *  @param getter
+   *    The name of the data getter function.
+   *  @param setter
+   *    The name of the data setter function.
    */
   ml.calculate = function(obj, options, count, wysiwyg, getter, setter) {
     var counter = $('#' + obj.attr('id') + '-' + options.css);
@@ -76,7 +90,7 @@
           }
         } else {
           obj.val(ml.truncate_html(obj.val(), limit));
-          // Re calculate text length
+          // Re-calculate text length.
           count = ml.strip_tags(obj.val()).length;
         }
       }
@@ -93,25 +107,38 @@
    * Replaces line ending with to chars, because PHP-calculation counts with two chars
    * as two characters.
    *
+   *  @param str
+   *   The given string to replace line endings for.
+   *
    * @see http://www.sitepoint.com/blogs/2004/02/16/line-endings-in-javascript/
    */
   ml.twochar_lineending = function(str) {
     return str.replace(/(\r\n|\r|\n)/g, "\r");
   };
 
+  /**
+   * Function to strip tags of a given input.
+   *
+   *  @param input
+   *   The given string to strip tags for.
+   *  @param allowed
+   *   Allowed tags, defaults to empty.
+   *
+   * @see http://www.sitepoint.com/blogs/2004/02/16/line-endings-in-javascript/
+   */
   ml.strip_tags = function(input, allowed) {
     // Remove all newlines, spaces and tabs from the beginning and end of html.
     input = $.trim(input);
-    // making the lineendings with two chars
+    // Making the line-endings with two chars.
     input = ml.twochar_lineending(input);
-    //input = input.split(' ').join('');
-    // Strips HTML and PHP tags from a string
+    // Making sure the allowed arg is a string containing only tags in
+    // lowercase (<a><b><c>).
     allowed = (((allowed || "") + "")
         .toLowerCase()
         .match(/<[a-z][a-z0-9]*>/g) || [])
-        .join(''); // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
-    var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
-        commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;
+        .join('');
+    var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi, commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;
+    // Strips HTML and PHP tags from a string.
     input = input.replace(commentsAndPhpTags, '').replace(tags, function($0, $1){
       return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
     });
@@ -121,7 +148,12 @@
   };
 
   /**
-   * Cuts a html text up to limit characters. Still experimental.
+   * Cuts an HTML text up to limit characters.
+   *
+   *  @param text
+   *   The given text to truncate.
+   *  @param limit
+   *   The number of characters to which we need to limit the text.
    */
   ml.truncate_html = function(text, limit) {
     // The html result after cut.
@@ -130,6 +162,25 @@
     var result_text = '';
     // A stack that will keep the tags that are open at a given time.
     var tags_open = new Array();
+    // List of self-closing tags
+    var self_closing_tags = [
+      'area',
+      'base',
+      'br',
+      'col',
+      'command',
+      'embed',
+      'hr',
+      'img',
+      'input',
+      'keygen',
+      'link',
+      'meta',
+      'param',
+      'source',
+      'track',
+      'wbr'
+    ];
     // making the lineendings with two chars
     text = ml.twochar_lineending(text);
     while (result_text.length < limit && text.length > 0) {
@@ -161,10 +212,10 @@
               //Done with this char, remove it from the original text.
               text = text.substring(1);
             }
-            if (!tag_name_completed) {
+            if (!tag_name_completed && self_closing_tags.indexOf(tag_name) == -1) {
               // In this case we have a tag like "<strong>some text</strong> so
               // we did not have any attributes in the tag, but still, the tag
-              // has to be marked as open.
+              // has to be marked as open. If tag is self-closing, skip.
               tags_open.push(tag_name);
             }
             //We are here, then the tag is closed, so just remove the
@@ -230,6 +281,12 @@
     return result_html;
   }
 
+  /**
+   * Character counter function that sets the character count message.
+   *
+   *  @param options
+   *    The array containing maxlength configurations.
+   */
   $.fn.charCount = function(options) {
     // default configuration properties
     var defaults = {
@@ -283,7 +340,7 @@
   ml.ckeditorOnce = false;
 
   /**
-   * Integrate with ckEditor
+   * Integrate with CKEditor4.
    * Detect changes on editors and invoke ml.calculate()
    */
   ml.ckeditor = function() {
@@ -345,4 +402,37 @@
     }
   }
 
+  /**
+   * Function that integrates maxlength behaviour with CKEditor 5.
+   *
+   *  @param editor
+   *    The ckeditor that has the "maxlength" class.
+   *  @param options
+   *    The array containing the maxlength configurations.
+   */
+  ml.ckeditor5 = function (editor, options) {
+    $(once('maxlengthbinding', editor.sourceElement)).each(function() {
+      editor.model.document.on('change', function() {
+        if (editor.getData() !== editor.sourceElement.textContent) {
+          // Trim if limit is reached and enforcing is activated.
+          if (options['enforce']) {
+            let maxlength = $(editor.sourceElement).data('maxlength');
+            let data = editor.getData();
+            let trimmed = ml.truncate_html(data, maxlength);
+            if (data.length !== trimmed.length) {
+              editor.setData(trimmed);
+              setTimeout(() => {
+                editor.model.change( writer => {
+                  writer.setSelection( writer.createPositionAt( editor.model.document.getRoot(), 'end' ) );
+                }
+              )}, 1);
+            }
+          }
+          editor.updateSourceElement();
+          $(editor.sourceElement).trigger('change', [true]);
+        }
+      });
+    });
+  }
+
 })(jQuery, Drupal);
diff --git a/tests/src/FunctionalJavascript/MaxlengthCkeditorTest.php b/tests/src/FunctionalJavascript/MaxlengthCkeditorTest.php
new file mode 100644
index 0000000000000000000000000000000000000000..801497317b1c79add660b6cf8aabc35714bc7a88
--- /dev/null
+++ b/tests/src/FunctionalJavascript/MaxlengthCkeditorTest.php
@@ -0,0 +1,254 @@
+<?php
+
+namespace Drupal\Tests\maxlength\FunctionalJavascript;
+
+use Behat\Mink\Element\NodeElement;
+use Drupal\Core\Entity\Entity\EntityFormDisplay;
+use Drupal\editor\Entity\Editor;
+use Drupal\entity_test\Entity\EntityTest;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\field\Entity\FieldStorageConfig;
+use Drupal\filter\Entity\FilterFormat;
+use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
+
+/**
+ * Tests Javascript behaviour of Maxlength module with CKEditor.
+ *
+ * @group maxlength
+ */
+class MaxlengthCkeditorTest extends WebDriverTestBase {
+
+  /**
+   * The user to use during testing.
+   *
+   * @var \Drupal\user\UserInterface
+   */
+  protected $user;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = [
+    'entity_test',
+    'maxlength',
+    'text',
+    'ckeditor5',
+  ];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $defaultTheme = 'stark';
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp(): void {
+    parent::setUp();
+
+    FilterFormat::create([
+      'format' => 'full_html',
+      'name' => 'Full HTML',
+      'weight' => 1,
+      'filters' => [],
+    ])->save();
+
+    $this->user = $this->drupalCreateUser([
+      'access administration pages',
+      'administer entity_test content',
+      'administer site configuration',
+      'administer filters',
+      'use text format full_html',
+    ]);
+    $this->drupalLogin($this->user);
+  }
+
+  /**
+   * Tests the character count and limit works with CKEditor 5 version.
+   */
+  public function testCkeditor5() {
+    Editor::create([
+      'format' => 'full_html',
+      'editor' => 'ckeditor5',
+      'settings' => [
+        'toolbar' => [
+          'items' => [
+            'heading',
+            'bold',
+            'italic',
+            // Ensure we enable the source button for the test.
+            'sourceEditing',
+          ],
+        ],
+      ],
+    ])->save();
+    FieldStorageConfig::create([
+      'type' => 'text_long',
+      'entity_type' => 'entity_test',
+      'field_name' => 'foo',
+    ])->save();
+    FieldConfig::create([
+      'entity_type' => 'entity_test',
+      'bundle' => 'entity_test',
+      'field_name' => 'foo',
+      'label' => 'Foo',
+      'description' => 'Description of a text field',
+    ])->save();
+    $widget = [
+      'type' => 'text_textarea_with_summary',
+      'settings' => [
+        'show_summary' => TRUE,
+        'summary_rows' => 3,
+      ],
+      'third_party_settings' => [
+        'maxlength' => [
+          'maxlength_js' => 200,
+          'maxlength_js_label' => 'Content limited to @limit characters, remaining: <strong>@remaining</strong> and total @count',
+        ],
+      ],
+    ];
+    EntityFormDisplay::load('entity_test.entity_test.default')
+      ->setComponent('foo', $widget)
+      ->save();
+
+    $entity = EntityTest::create(['type' => 'entity_test', 'name' => 'Test']);
+    $entity->save();
+
+    $this->drupalLogin($this->user);
+    $this->drupalGet($entity->toUrl('edit-form'));
+
+    // Assert CKEditor5 is present.
+    $settings = $this->getDrupalSettings();
+    $this->assertContains('ckeditor5/internal.drupal.ckeditor5', explode(',', $settings['ajaxPageState']['libraries']), 'CKEditor5 glue library is present.');
+
+    // Assert the maxlength counter labels.
+    $this->assertSession()->pageTextContainsOnce('Content limited to 200 characters, remaining: 200 and total 0');
+
+    // Give maxlength.js some time to manipulate the DOM.
+    $this->assertSession()->waitForElement('css', 'div.counter');
+
+    // Check that only a counter div is found on the page.
+    $this->assertSession()->elementsCount('css', 'div.counter', 1);
+
+    // Check that the counter div follows the description of the field.
+    $found = $this->xpath('//div[@data-drupal-selector="edit-foo-0"]/following-sibling::div[@id="edit-foo-0-value-counter"]');
+    $this->assertCount(1, $found);
+
+    // Add some text to the field and assert the maxlength counters changed accordingly.
+    $this->enterTextInCkeditor('Foo', 'Some text with <strong>html</strong>');
+
+    $this->assertSession()->pageTextContainsOnce('Content limited to 200 characters, remaining: 181 and total 19');
+
+    // Fill the body field with more characters than the limit.
+    $this->enterTextInCkeditor('Foo', '<b>Lorem ipsum</b> dolor sit amet, <u>consectetur adipiscing</u> elit. Ut accumsan justo non interdum fermentum. Phasellus semper risus eu arcu eleifend dignissim. Class aptent taciti sociosqu ad litora erat curae. Extra characters');
+    // The counter now should show "-17" for the extra characters.
+    $this->assertSession()->pageTextContainsOnce('Content limited to 200 characters, remaining: -17 and total 217');
+
+    // Now change the maxlength configuration to use "Hard limit".
+    $widget['third_party_settings']['maxlength']['maxlength_js_enforce'] = TRUE;
+    $display = \Drupal::entityTypeManager()->getStorage('entity_form_display')->load('entity_test.entity_test.default');
+    $display->setComponent('foo', $widget)->save();
+
+    // Reload the page.
+    $this->getSession()->reload();
+    // Fill the body field with more characters than the limit.
+    $this->enterTextInCkeditor('Foo', '<b>Lorem ipsum</b> dolor sit amet, <br><u>consectetur adipiscing</u> elit. Ut accumsan justo non interdum fermentum. Phasellus semper risus eu arcu eleifend dignissim. Class aptent taciti sociosqu ad litora erat curae. Extra characters');
+    // Assert the "Extra characters" string is truncated.
+    $this->assertSession()->pageTextContainsOnce('Content limited to 200 characters, remaining: 0 and total 200');
+  }
+
+  /**
+   * Presses the given CKEditor button.
+   *
+   * @param string $field
+   *   The label of the field to which the CKEditor is attached. For example
+   *   'Body'.
+   * @param string $button
+   *   The title of the button to click.
+   */
+  protected function pressCkeditorButton(string $field, string $button): void {
+    $wysiwyg = $this->getCkeditor($field);
+    $button_elements = $this->getSession()->getDriver()->find($wysiwyg->getXpath() . '//button[@data-cke-tooltip-text="' . $button . '"]');
+    if (empty($button_elements)) {
+      throw new \Exception("Could not find the '$button' button.");
+    }
+    if (count($button_elements) > 1) {
+      throw new \Exception("Multiple '$button' buttons found in the editor.");
+    }
+    $button = reset($button_elements);
+    $button->click();
+  }
+
+  /**
+   * Enters the given text in the textarea of the specified CKEditor.
+   *
+   * If there is any text existing it will be replaced.
+   *
+   * @param string $field
+   *   The label of the field to which the CKEditor is attached. For example
+   *   'Body'.
+   * @param string $text
+   *   The text to enter in the textarea.
+   */
+  protected function setCkeditorText(string $field, string $text): void {
+    $wysiwyg = $this->getCkeditor($field);
+    $textarea_elements = $this->getSession()->getDriver()->find($wysiwyg->getXpath() . '//textarea');
+    if (empty($textarea_elements)) {
+      throw new \Exception("Could not find the textarea for the '$field' field.");
+    }
+    if (count($textarea_elements) > 1) {
+      throw new \Exception("Multiple textareas found for '$field'.");
+    }
+    $textarea = reset($textarea_elements);
+    $textarea->setValue($text);
+  }
+
+  /**
+   * Returns the CKEditor that is associated with the given field label.
+   *
+   * @param string $field
+   *   The label of the field to which the CKEditor is attached.
+   *
+   * @return \Behat\Mink\Element\NodeElement
+   *   The WYSIWYG editor.
+   */
+  protected function getCkeditor(string $field): NodeElement {
+    $driver = $this->getSession()->getDriver();
+    $label_elements = $driver->find('//label[text()="' . $field . '"]');
+    if (empty($label_elements)) {
+      throw new \Exception("Could not find the '$field' field label.");
+    }
+    if (count($label_elements) > 1) {
+      throw new \Exception("Multiple '$field' labels found in the page.");
+    }
+    $wysiwyg_elements = $driver->find('//div[@id="edit-' . strtolower($field) . '-wrapper"]//div//div//div[contains(@class, " ck-editor ")]');
+    if (empty($wysiwyg_elements)) {
+      throw new \Exception("Could not find the '$field' wysiwyg editor.");
+    }
+    if (count($wysiwyg_elements) > 1) {
+      throw new \Exception("Multiple '$field' wysiwyg editors found in the page.");
+    }
+    return reset($wysiwyg_elements);
+  }
+
+  /**
+   * Enters the given text in the given CKEditor.
+   *
+   * @param string $label
+   *   The label of the field containing the CKEditor.
+   * @param string $text
+   *   The text to enter in the CKEditor.
+   */
+  protected function enterTextInCkeditor(string $label, string $text): void {
+    // If we are running in a JavaScript enabled browser, first click the
+    // 'Source' button so we can enter the text as HTML and get the same result
+    // as in a non-JS browser.
+    $this->pressCkeditorButton($label, 'Source');
+    $this->setCkeditorText($label, $text);
+    // Make sure we switch back to normal view and let javascript to
+    // execute filters on the text and validate the html.
+    $this->pressCkeditorButton($label, 'Source');
+    $this->getSession()->wait(2000);
+  }
+
+}
